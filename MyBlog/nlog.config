<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!--自定義變數-->
	<variable name="logDirectory" value="logs/${shortdate}"/>

	<targets>

		<!--輸出目標為實體檔案-->
		<target name="logfile" xsi:type="File" fileName="C:\Users\gfytr\Desktop\MyProjects\MyBlog\MyBlog\${logDirectory}\MyBlog.txt"/>

		<!--輸出目標為控制台-->
		<target name="logconsole" xsi:type="Console" />

	</targets>

	<!--符合規則條件(roles)的都將寫入(writeTo)相應的目標(target)
		規則將由上至下按順序讀取至駔後一個 故將最終接受全*也就是:{NameSpace.ClassName}的規則放在最下方-->
	<rules>
		<!--忽略所有非關鍵的Microsoft紀錄-->
		<logger name="Microsoft.*" maxlevel="Info" final="true" />

		<logger name="*" minlevel="Debug" writeTo="logfile" />
		<logger name="*" minlevel="Debug" writeTo="logconsole" />
	</rules>

</nlog>















<!--以下為github上的範例-->


<!--<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  autoReload="true"
	  throwConfigExceptions="true"
	  internalLogLevel="info"
	  internalLogFile="C:\Users\gfytr\Desktop\MyProjects\MyBlog\MyBlog\log\MyBlog.txt">

	-->
<!-- enable asp.net core layout renderers -->
<!--
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>






	-->
<!--the targets to write to-->
<!--
	<targets>
		File Target for all log messages with basic details
		<target xsi:type="File" name="allfile" fileName="c:\temp\nlog-AspNetCore3-all-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}" />

		File Target for own log messages with extra web details using some ASP.NET core renderers
		<target xsi:type="File" name="ownFile-web" fileName="C:\Users\gfytr\Desktop\MyProjects\MyBlog\MyBlog\log\MyBlog-${shortdate}.log"
				layout="${longdate} | ${event-properties:item=EventId_Id:whenEmpty=0} | ${level:uppercase=true} | ${logger} | ${message} ${exception:format=tostring} | url: ${aspnet-request-url} | action: ${aspnet-mvc-action}|" />

		Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection
		<target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />
	</targets>

	-->
<!--rules to map from logger name to target-->
<!--
	<rules>
		All logs, including from Microsoft
		<logger name="*" minlevel="Trace" writeTo="allfile" />

		Output hosting lifetime messages to console target for faster startup detection
		<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole, ownFile-web" final="true" />

		Skip non-critical Microsoft logs and so log only own logs
		<logger name="Microsoft.*" maxlevel="Info" final="true" />
		BlackHole

		<logger name="*" minlevel="Debug" writeTo="ownFile-web" />
	</rules>
</nlog>-->